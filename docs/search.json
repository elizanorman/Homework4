[
  {
    "objectID": "HW4.html",
    "href": "HW4.html",
    "title": "Homework 4",
    "section": "",
    "text": "The lapply() function applies a function to each element of a list. The purrr equivalent is map()\n\n\n\nnewList &lt;- lapply(list, function(x) cor(x, method = \"kendall\"))\n\n\nThe purrr function output is consistent, with many helper functions, and the purrr functions have unified syntax.\nA side-effect function is one that produces output (like plot)\nThe variable sd would only exist inside the function that you named it in, so it wouldn’t conflict with the sd function"
  },
  {
    "objectID": "HW4.html#task-1-conceptual-questions",
    "href": "HW4.html#task-1-conceptual-questions",
    "title": "Homework 4",
    "section": "",
    "text": "The lapply() function applies a function to each element of a list. The purrr equivalent is map()\n\n\n\nnewList &lt;- lapply(list, function(x) cor(x, method = \"kendall\"))\n\n\nThe purrr function output is consistent, with many helper functions, and the purrr functions have unified syntax.\nA side-effect function is one that produces output (like plot)\nThe variable sd would only exist inside the function that you named it in, so it wouldn’t conflict with the sd function"
  },
  {
    "objectID": "HW4.html#task-2-writing-r-functions",
    "href": "HW4.html#task-2-writing-r-functions",
    "title": "Homework 4",
    "section": "Task 2: Writing R Functions",
    "text": "Task 2: Writing R Functions\n\nCreating the RMSE function getRMSE\n\n\ngetRMSE &lt;- function(responses, predictions, ...){\n  numerator &lt;- ((responses - predictions)^2)\n  return(sqrt(mean(numerator, ...)))\n}\n\n\nTesting the RMSE function on random values\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\nresp[99:100] &lt;- c(NA_real_, NA_real_)\npred2 &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetRMSE(resp, pred2, na.rm = TRUE)\n\n[1] 0.9603433\n\ngetRMSE(resp, pred2)\n\n[1] NA\n\n\n\nCreating the MAE function\n\n\ngetMAE &lt;- function(responses, predictions, ...){\n  numerator &lt;- abs(responses - predictions)\n  return(mean(numerator, ...))\n}\n\n\nTesting the MAE function on random values\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetMAE(resp, pred)\n\n[1] 0.8155776\n\nresp[99:100] &lt;- c(NA_real_, NA_real_)\npred2 &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetMAE(resp, pred2, na.rm = TRUE)\n\n[1] 0.8196563\n\ngetMAE(resp, pred2)\n\n[1] NA\n\n\n\nCreating a wrapper function to find the desired metrics with a single function call\n\n\nmyWrapper &lt;- function(metrics = \"both\", responses, predictions){\n  if(is.vector(responses) & is.vector(predictions)){\n    if(is.atomic(responses) & is.atomic(predictions)){\n      if(is.numeric(responses) & is.numeric(predictions)){\n        if(metrics == \"both\"){\n          return(list(MAE = getMAE(responses, predictions), RMSE = getRMSE(responses, predictions)))\n        }else if(metrics == \"RMSE\"){\n          return(list(RMSE = getRMSE(responses, predictions)))\n        }else if(metrics == \"MAE\"){\n          return(list(MAE = getMAE(responses,predictions)))\n        }else{\n          stop(\"Need to specify RMSE or MAE to be returned\")\n        }\n      }else{\n        stop(\"Could not execute. Please make sure both input vectors are numeric\")\n      }\n    }else{\n      stop(\"Could not execute. Please make sure both input vectors are atomic\")\n    }\n  }else{\n    stop(\"Could not execute. Please make sure both inputs are vectors\")\n  }\n}  \nmyWrapper(\"RMSE\", responses = c(3,4,5), predictions= c(4,5,6))\n\n$RMSE\n[1] 1\n\nmyWrapper(\"both\", responses = c(3,4,5), predictions= c(4,5,6))\n\n$MAE\n[1] 1\n\n$RMSE\n[1] 1\n\n\n\nTesting the wrapper function with random values and an incorrect data type\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nmyWrapper(\"RMSE\", resp, pred)\n\n$RMSE\n[1] 0.9581677\n\nmyWrapper(\"MAE\", resp, pred)\n\n$MAE\n[1] 0.8155776\n\nmyWrapper(\"both\", resp, pred)\n\n$MAE\n[1] 0.8155776\n\n$RMSE\n[1] 0.9581677\n\nresp[99:100] &lt;- c(NA_real_, NA_real_)\npred2 &lt;- predict(lm(resp ~ x), data.frame(x))\n\nmyWrapper(\"RMSE\", resp, pred2)\n\n$RMSE\n[1] NA\n\nmyWrapper(\"MAE\", resp, pred2)\n\n$MAE\n[1] NA\n\nmyWrapper(\"both\", resp, pred2)\n\n$MAE\n[1] NA\n\n$RMSE\n[1] NA\n\nmyWrapper(\"RMSE\", as.data.frame(resp), pred2)\n\nError in myWrapper(\"RMSE\", as.data.frame(resp), pred2): Could not execute. Please make sure both inputs are vectors"
  },
  {
    "objectID": "HW4.html#task-3-querying-an-api-and-tidy-style-function",
    "href": "HW4.html#task-3-querying-an-api-and-tidy-style-function",
    "title": "Homework 4",
    "section": "Task 3: Querying an API and Tidy-Style Function",
    "text": "Task 3: Querying an API and Tidy-Style Function\n\nUsing GET() from the httr package to return information about tesla articles and store as teslaInfo object\n\n\nteslaNews &lt;- \"https://newsapi.org/v2/everything?q=tesla&from=2024-05-25&sortBy=publishedAt&apiKey=da7c72240fbd4e70bbad7b808f4a3428\"\nteslaInfo &lt;- httr::GET(teslaNews)\nstr(teslaInfo, max.level = 1)\n\nList of 10\n $ url        : chr \"https://newsapi.org/v2/everything?q=tesla&from=2024-05-25&sortBy=publishedAt&apiKey=da7c72240fbd4e70bbad7b808f4a3428\"\n $ status_code: int 200\n $ headers    :List of 14\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n $ cookies    :'data.frame':    0 obs. of  7 variables:\n $ content    : raw [1:87246] 7b 22 73 74 ...\n $ date       : POSIXct[1:1], format: \"2024-06-26 11:20:19\"\n $ times      : Named num [1:6] 0 0.294 0.328 0.4 0.682 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\n\n\nParse this and store the “articles” column as a tibble\n\n\nparsed &lt;- fromJSON(rawToChar(teslaInfo$content))\ninfo2 &lt;- as_tibble(parsed$articles)\ninfo2\n\n# A tibble: 100 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 &lt;NA&gt;      Febe… Wille… Kine… \"Chang’e-6… http… https://i… 2024-06-25… \"+\\r\\n…\n 2 &lt;NA&gt;      Over… Proxv… Tesl… \"Более 19 … http… https://o… 2024-06-25… \"Tesla…\n 3 &lt;NA&gt;      Yaho… &lt;NA&gt;   Tesl…  &lt;NA&gt;       http… &lt;NA&gt;       2024-06-25… \"If yo…\n 4 &lt;NA&gt;      Hibr… Diego… La p… \"Tesla hiz… http… https://w… 2024-06-25… \"Tesla…\n 5 the-verge The … Thoma… Tesl… \"The two N… http… https://c… 2024-06-25… \"Tesla…\n 6 &lt;NA&gt;      Thef… &lt;NA&gt;   Tesl… \"See the r… http… https://t… 2024-06-25… \"Earni…\n 7 &lt;NA&gt;      Yaho… &lt;NA&gt;   道指… \"雖然剛有…  http… &lt;NA&gt;       2024-06-25… \"If yo…\n 8 &lt;NA&gt;      Clea… Steve… Cali… \"The Calif… http… https://c… 2024-06-25… \"Sign …\n 9 associat… Asso… ap ne… For … \"Tesla is … http… https://d… 2024-06-25… \"DETRO…\n10 the-verge The … Andre… Uber… \"Uber Frei… http… https://c… 2024-06-25… \"Uber …\n# ℹ 90 more rows\n\n\n\nCreating a function so that the user can query this API and find any article with the given title, from a given date until now, using their API key\n\n\nqueryAPIFunction &lt;- function(title, userTime, key){\n  news &lt;- paste(\"https://newsapi.org/v2/everything?q=\", title, \"&from=\", userTime, \"&apiKey=\", key, sep = \"\")\n  APIresponse &lt;- httr::GET(news)\n  parsed &lt;- fromJSON(rawToChar(APIresponse$content))\n  return(as_tibble(parsed$articles))\n}\nqueryAPIFunction(title = \"Tesla%20recalls%20thousands%20of%20Cybertrucks%20over%20windshield%20wiper,%20trunk%20bed%20trim%20issues%20-%20Fox%20Business\", userTime = \"2024-05-26\", key = \"da7c72240fbd4e70bbad7b808f4a3428\")\n\n# A tibble: 0 × 0\n\nqueryAPIFunction(title = \"Canned%20coffee%20products%20recalled%20due%20to%20food%20poisoning%20risk%20-%20WPRI.com\", userTime = \"2024-05-26\", key = \"da7c72240fbd4e70bbad7b808f4a3428\")\n\n# A tibble: 0 × 0"
  }
]